package com.project.malware_scanner.service;

import com.project.malware_scanner.model.CheckEvent;
import com.project.malware_scanner.model.CheckResultEvent;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;
import org.springframework.util.FileCopyUtils;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

@Service
public class MalwareScannerService
{
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(MalwareScannerService.class);

    private static final Set<String> BLACKLISTED_IBANS = new HashSet<>();

    static {
        try
        {
            loadBlacklistedIbans();
        }
        catch (IOException e)
        {
            log.error("Error loading blacklisted ibans", e);
        }
    }


    private static void loadBlacklistedIbans() throws IOException
    {
        ClassPathResource resource = new ClassPathResource("blacklisted_ibans.txt");
        byte[] ibansBytes = FileCopyUtils.copyToByteArray(resource.getInputStream());
        String ibansString = new String(ibansBytes, StandardCharsets.UTF_8);

        // Split the content of the file into lines and add to the set
        String[] ibanArray = ibansString.split("\\r?\\n");
        BLACKLISTED_IBANS.addAll(Arrays.asList(ibanArray));
    }


    public CheckResultEvent scanDocument(CheckEvent checkEvent)
    {
        try
        {
            InputStream documentInputStream = checkEvent.getDocumentInputStream();
            PDDocument document = PDDocument.load(documentInputStream);

            PDFTextStripper pdfTextStripper = new PDFTextStripper();
            String text = pdfTextStripper.getText(document);

            boolean isBlacklisted = BLACKLISTED_IBANS.stream().anyMatch(text::contains);
            document.close();

            return new CheckResultEvent(!isBlacklisted);
        }
        catch (IOException e)
        {
            log.error("Error reading input stream from file", e);
            return new CheckResultEvent(false);
        }
    }


}
